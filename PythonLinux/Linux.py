import os
import readline
import time
import sys
import getpass
import json
import random
import string

PASSWORD_FILE = "Password.txt"
DEBUG_LOG = "debug.log"
USER_FS_FILE = "user_fs.json"

def log_debug(message):
    with open(DEBUG_LOG, "a") as log_file:
        log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def load_passwords():
    if not os.path.exists(PASSWORD_FILE):
        return {}
    with open(PASSWORD_FILE, "r") as f:
        lines = f.read().splitlines()
        return dict(line.split(":") for line in lines if ":" in line)

def save_password(username, password):
    with open(PASSWORD_FILE, "a") as f:
        f.write(f"{username}:{password}\n")

def load_all_fs():
    if os.path.exists(USER_FS_FILE):
        with open(USER_FS_FILE, "r") as f:
            return json.load(f)
    return {}

def save_all_fs():
    with open(USER_FS_FILE, "w") as f:
        json.dump(all_fs, f, indent=4)

def load_user_fs(username):
    return all_fs.get(username, create_new_fs(username))

def save_user_fs(username):
    all_fs[username] = fake_fs
    save_all_fs()

def create_new_fs(username):
    return {
        "home": {username: {}},
        "root": {"secure.txt": "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!"},
        "etc": {},
        "var": {},
        "bin": {},
        "usr": {},
        "tmp": {},
        "dev": {},
        "proc": {},
        "sys": {}
    }

def get_dir(path):
    parts = path.strip("/").split("/")
    current = fake_fs
    for part in parts:
        if part:
            if part in current:
                current = current[part]
            else:
                return None
    return current

def random_dir_name():
    return "".join(random.choices(string.ascii_lowercase, k=random.randint(3, 6)))

def generate_virus_game():
    directories = [random_dir_name() for _ in range(random.randint(3, 6))]
    game_fs = {name: {} for name in directories}
    virus_dir = random.choice(directories)
    game_fs[virus_dir]["virus.exe"] = "–û–ø–∞—Å–Ω—ã–π –≤–∏—Ä—É—Å! –£–¥–∞–ª–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `rm virus.exe`"
    return game_fs, virus_dir

def boot_sequence():
    messages = [
        "[    0.000000] Booting Linux kernel 5.10.0-21-amd64...",
        "[    0.002345] Initializing system...",
        "[    0.005678] Loading kernel modules...",
        "[    0.010000] Mounting file systems...",
        "[    0.015432] Starting system services...",
        "[    0.020123] Checking disk integrity... OK",
        "[    0.025678] Network interfaces initializing... OK",
        "[    0.030789] Running system diagnostics... OK",
        "[    0.035678] Launching user session..."
    ]
    for msg in messages:
        print(msg)
        time.sleep(0.2)
    print("\nWelcome to Debian!")
    log_debug("System boot completed.")

def shell():
    global current_path, fake_fs, username, all_fs

    while True:
        prompt = "$"
        print_path = current_path.rstrip("/") if current_path != "/" else "/"
        cmd = input(f"{username}@debian:{print_path}{prompt} ").strip().split()
        
        if not cmd:
            continue
        
        command, *args = cmd
        log_debug(f"Command executed: {command} {' '.join(args)}")
        
        try:
            if command == "exit":
                print("–í—ã—Ö–æ–¥...")
                if username != "Virus":
                    save_user_fs(username)
                log_debug("User exited shell.")
                break

            elif command == "logout":
                print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
                if username != "Virus":
                    save_user_fs(username)
                login()
                break

            elif command == "ls":
                dir_content = get_dir(current_path)
                print(" ".join(dir_content.keys()) if dir_content else "(–ø—É—Å—Ç–æ)")

            elif command == "cd":
                if args:
                    new_path = args[0]
                    potential_path = get_dir(f"{current_path}/{new_path}".replace("//", "/"))
                    if new_path == "..":
                        if current_path != "/":
                            current_path = "/".join(current_path.rstrip("/").split("/")[:-1]) or "/"
                    elif potential_path is not None and isinstance(potential_path, dict):
                        current_path = f"{current_path}/{new_path}".replace("//", "/")
                    else:
                        print("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            elif command == "rm":
                if args:
                    dir_content = get_dir(current_path)
                    if args[0] in dir_content:
                        del dir_content[args[0]]

                        if username != "Virus":
                            save_user_fs(username)

                        print(f"–£–¥–∞–ª–µ–Ω–æ: {args[0]}")

                        if username == "Virus" and args[0] == "virus.exe":
                            print("üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! –í–∏—Ä—É—Å —É–¥–∞–ª—ë–Ω! üéâ")
                            break
                    else:
                        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

            elif command == "mkdir":
                if args:
                    dir_name = args[0]
                    dir_content = get_dir(current_path)
                    if isinstance(dir_content, dict):
                        dir_content[dir_name] = {}
                        if username != "Virus":
                            save_user_fs(username)
                        print(f"–ü–∞–ø–∫–∞ '{dir_name}' —Å–æ–∑–¥–∞–Ω–∞")

            elif command == "touch":
                if args:
                    file_name = args[0]
                    dir_content = get_dir(current_path)
                    if isinstance(dir_content, dict):
                        dir_content[file_name] = ""
                        if username != "Virus":
                            save_user_fs(username)
                        print(f"–§–∞–π–ª '{file_name}' —Å–æ–∑–¥–∞–Ω")

            elif command == "cat":
                if args:
                    file_name = args[0]
                    dir_content = get_dir(current_path)
                    if file_name in dir_content:
                        print(dir_content[file_name])
                    else:
                        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

            elif command == "clear":
                os.system("cls" if os.name == "nt" else "clear")

            elif command == "help":
                print("Available commands:")
                print("  ls       - List files and directories")
                print("  cd       - Change directory")
                print("  mkdir    - Create a new directory")
                print("  touch    - Create a new file")
                print("  cat      - Read a file")
                print("  rm       - Remove a file or directory")
                print("  clear    - Clear the terminal")
                print("  logout   - Logout and switch user")
                print("  exit     - Exit the shell")

            else:
                print(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            log_debug(f"Error executing command {command}: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
def virus_game():
    global current_path, fake_fs, username
    print(r"""
 ‚ñà‚ñà‚ñí   ‚ñà‚ñì ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà    ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñÑ‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí     ‚ñà‚ñà‚ñí ‚ñÄ‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ 
 ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñÑ      ‚ñí‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà   
  ‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë  ‚ñí   ‚ñà‚ñà‚ñí   ‚ñë‚ñì‚ñà  ‚ñà‚ñà‚ñì‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ 
   ‚ñí‚ñÄ‚ñà‚ñë  ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí   ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
   ‚ñë ‚ñê‚ñë  ‚ñë‚ñì  ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë    ‚ñë‚ñí   ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë
   ‚ñë ‚ñë‚ñë   ‚ñí ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë     ‚ñë   ‚ñë   ‚ñí   ‚ñí‚ñí ‚ñë‚ñë  ‚ñë      ‚ñë ‚ñë ‚ñë  ‚ñë
     ‚ñë‚ñë   ‚ñí ‚ñë  ‚ñë‚ñë   ‚ñë  ‚ñë‚ñë‚ñë ‚ñë ‚ñë ‚ñë  ‚ñë  ‚ñë     ‚ñë ‚ñë   ‚ñë   ‚ñë   ‚ñí   ‚ñë      ‚ñë      ‚ñë   
      ‚ñë   ‚ñë     ‚ñë        ‚ñë           ‚ñë           ‚ñë       ‚ñë  ‚ñë       ‚ñë      ‚ñë  ‚ñë
     ‚ñë                                                                         
""")

    fake_fs, _ = generate_virus_game()
    current_path = "/"
    print("–í–∏—Ä—É—Å —Å–ø—Ä—è—Ç–∞–Ω. –ù–∞–π–¥–∏ –µ–≥–æ –∏ —É–¥–∞–ª–∏ `rm virus.exe`!\n")
    shell()

def login():
    global username, current_path, fake_fs, all_fs
    passwords = load_passwords()
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    
    if username == "Virus":
        password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        if password == "Game":
            virus_game()
            return
    
    if username in passwords:
        while True:
            password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            if password == passwords[username]:
                print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        print("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å.")
        password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
        save_password(username, password)
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    
    all_fs = load_all_fs()
    fake_fs = load_user_fs(username)
    if "home" not in fake_fs:
        fake_fs["home"] = {}
    if username not in fake_fs["home"]:
        fake_fs["home"][username] = {}
    current_path = f"/home/{username}"
    
    print("Type 'help' for a list of available commands.")
    shell()

if __name__ == "__main__":
    boot_sequence()
    login()
